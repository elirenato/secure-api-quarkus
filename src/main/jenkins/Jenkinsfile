pipeline {
    options {
      timeout(time: 10, unit: 'MINUTES')
      disableConcurrentBuilds()
    }
    agent {
        docker {
            // This image was built with the /src/main/jenkins/docker/Dockerfile
            image 'elirenato2000/jenkins_quarkus'
            args """
                -u root:root
                -v /root/.m2:/root/.m2
                -v /var/run/docker.sock:/var/run/docker.sock
            """
        }
    }
    stages {
        stage('Test') {
            steps {
                sh 'mvn verify'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    step( [ $class: 'JacocoPublisher' ] )
                }
            }
        }
        stage('Build') {
            steps {
                sh """
                    mvn -B \
                    -DskipTests package \
                    -Dquarkus.container-image.build=true \
                    -Dquarkus.container-image.push=true \
                    -Dquarkus.container-image.registry=${DOCKER_REGISTRY_HOST} \
                    -Dquarkus.container-image.username=${DOCKER_REGISTRY_USERNAME} \
                    -Dquarkus.container-image.password="${DOCKER_REGISTRY_PASSWORD}"
                """
            }
        }
        stage('Deploy') {
            steps {
                sshagent (credentials: ['kubernetes-server'])  {
                    sh 'scp -o StrictHostKeyChecking=no -r -v -P ${KUBERNETES_SERVER_PORT} target/kubernetes/kubernetes.yml ${KUBERNETES_SERVER_USERNAME}@${KUBERNETES_SERVER_HOST}:/tmp/kubernetes.yml'
                    sh 'ssh -o StrictHostKeyChecking=no -p ${KUBERNETES_SERVER_PORT} ${KUBERNETES_SERVER_USERNAME}@${KUBERNETES_SERVER_HOST} \"microk8s kubectl apply -f /tmp/kubernetes.yml\"'
                }
            }
        }
    }
}